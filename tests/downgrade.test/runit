#!/usr/bin/env bash
bash -n "$0" | exit 1

set -e
set -x
source ${TESTSROOTDIR}/tools/runit_common.sh


cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "create table m (i int primary key)" 2>&1
cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "create table c (i int index, j int, foreign key (i) references m(i) on update cascade on delete cascade)" 2>&1

cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "insert into m select * from generate_series limit 10" 2>&1
assertcnt m 10
cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "insert into c select * from m, generate_series limit 100" 2>&1
assertcnt c 100

master=`getmaster`
# Delay writes
cdb2sql ${CDB2_OPTIONS} --host $master ${DBNAME} "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 1000')"

# Run a long (22s) transaction -- it's long only on original master node
cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "delete from m" 2>&1 &

sleep 20

# Downgrade master -- the above txn will be non-long on new master node
cdb2sql ${CDB2_OPTIONS} --host $master ${DBNAME} "exec procedure sys.cmd.send('downgrade')" 2>&1

wait

# Make sure every node is still up
if [ -n "$CLUSTER" ] ; then
    for node in $CLUSTER ; do
        cdb2sql ${CDB2_OPTIONS} --host $node ${DBNAME} "select 1"
    done
fi

assertcnt c 0
assertcnt m 0

downgrade()
{
    set +e
    dbname=$1

    while true; do
        master=`getmaster`
        cdb2sql ${CDB2_OPTIONS} --host $master ${DBNAME} "exec procedure sys.cmd.send('downgrade')" 2>&1
#       for node in $CLUSTER ; do
#            sleep 0.9
#            echo "set hasql on # exec procedure sys.cmd.send('downgrade')" | cdb2sql ${CDB2_OPTIONS} --maxretries 10000 --delim=# --host $node $dbname
#       done
        sleep 2
    done
}

ha_assertcnt ()
{
    if [[ $# != 2 ]] && [[ $# != 3 ]] ; then 
        failexit "Expecting 2 (opt 3) parameters but instead was passed $#"
    fi
    local tbl=$1
    local target=$2
    local comment=${3:+"($3)"}
    local cnt=$(echo "set hasql on # select count(*) from $tbl" | $c2s --script --tabs -v 2> cnt.out)
    if [ $? -ne 0 ] ; then
        echo "haassertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "tbl $tbl count is now $cnt but should be $target $comment"
    fi
}

echo "This part of the test downgrade continuously so we need to use high availability mode"
sendtocluster "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 0')"
#sendtocluster "put tunable debug.delay_election_ms 100"

downgrade $DBNAME &> downgrade.out &
dgpid=$!
trap "kill $dgpid" INT EXIT

# need hasql and -maxretries otherwise we can get:
# 'failed with rc -1 cdb2_run_statement_typed_int: Cannot connect to db'
c2s="cdb2sql ${CDB2_OPTIONS} --delim=# --maxretries=100000 ${DBNAME} default"
for i in {1..100} ; do
    echo "round $i"
    echo "set hasql on # insert into m select * from generate_series limit 10" | $c2s -v 2> ins1.out
    ha_assertcnt m 10
    echo "set hasql on # insert into c select * from m, generate_series limit 100" | $c2s -v 2> ins2.out
    ha_assertcnt c 100
    echo "set hasql on # delete from m" | $c2s -v 2> del.txt
    ha_assertcnt c 0
    ha_assertcnt m 0
done

exit 0 
