#!/bin/bash
bash -n "$0" | exit 1

#set -e
set -x

dbnm=$1

if [[ -z "$CLUSTER" ]]; then
    echo This test is not appropriate for sigle node setup
    exit 0
fi

function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}
function getnonmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep -v MASTER | tail -1 | cut -f1 -d":" | tr -d '[:space:]'
}

failexit()
{
    echo "Failed $1"
    exit -1
}

kill_by_pidfile() 
{
    pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        ps -p $pid -o args | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then
            echo "kill -9 $pid"
            kill -9 $pid
        fi
        rm -f $pidfile
    else
        failexit "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}


kill_restart_node()
{
    node=$1
    if [ "x$node" == "x" ] ; then
        failexit "need node name to restart"
    fi
    delay=$2
    if [ "x$delay" == "x" ] ; then
        delay=0
    fi
    pushd $DBDIR
    cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'exec procedure sys.cmd.send("flush")'

    if [ -n "$CLUSTER" ] ; then
        kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
        mv --backup=numbered $TESTDIR/logs/${DBNAME}.${node}.db $TESTDIR/logs/${DBNAME}.${node}.db.1
        sleep $delay
        if [ $node != `hostname` ] ; then
            ssh -o StrictHostKeyChecking=no -tt $node COMDB2_ROOT=$COMDB2_ROOT $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl >$TESTDIR/logs/${DBNAME}.${node}.db 2>&1 </dev/null &
            echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
        else
            $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl &> $TESTDIR/logs/${DBNAME}.${node}.db -pidfile ${TMPDIR}/${DBNAME}.${node}.pid &
        fi
    else
        kill_by_pidfile ${TMPDIR}/${DBNAME}.pid
        mv --backup=numbered $TESTDIR/logs/${DBNAME}.db $TESTDIR/logs/${DBNAME}.db.1
        sleep $delay
        echo "$DBNAME: starting single node"
        echo "$COMDB2_EXE $DBNAME $TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid"
        $COMDB2_EXE $DBNAME >$TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid 2>&1 &
    fi

    popd

    set +e
    out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
    # wait until we can query it
    echo "$DBNAME: waiting until ready"
    while [[ "$out" != "1" ]]; do
        sleep 2
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        cdb2sql -v ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' &> restart_db.out
    done
    set -e
}

function assertcnt 
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}




cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('reql events detailed on')"
done

master=`getmaster`
while [ "$master" == "`hostname`" ] ; do
    echo 'send downgrade so master is not localhost'
    cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master "exec procedure sys.cmd.send('downgrade')"
    sleep 2
    master=`getmaster`
done

# get a replicant
node=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select comdb2_host()"`
if [ "$node" == "$master" ] ; then
    cdb2sql -v --tabs ${CDB2_OPTIONS} $dbnm default "select comdb2_host()" > host.out
    failexit "node is same as master $master"
fi

# store 100 in account with id 1
cdb2sql -v ${CDB2_OPTIONS} $dbnm default "insert into t1 values (1, 100)" > insert.out
assertcnt 1
sleep 1

#set master commit_delay to X seconds so we have time to kill the replicant
cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master "exec procedure sys.cmd.send('bdb setattr delay_after_toblock_commit 3000')"
cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master "exec procedure sys.cmd.send('bdb attr')" > attr.out

#commands:
#select comdb2_host()
#set HASQL on
#update > in.sql
#cdb2sql -v ${CDB2_OPTIONS} $dbnm default "update t1 set b=b + 10 where id = 1" 2>&1 | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' &>> upd.out & 
cdb2sql -v ${CDB2_OPTIONS} $dbnm default "update t1 set b=b + 10 where id = 1" &>> upd.out & 
upid=$!

sleep 1
echo "killing replicant $node" | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >> upd.out
kill_restart_node $node
echo "killed replicant $node, waiting for update" | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >> upd.out

set +e

wait $upid
rc=$?
echo "done waiting for update, rc=$rc" | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >> upd.out
if [ $rc != 0 ] ; then
    failexit "update failed, rc=$rc"
fi

#allow time for cdb2sql to retry

cdb2sql -v -tabs ${CDB2_OPTIONS} $dbnm default "select b from t1 where id = 1" &> last_sel.out
cnt=`cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default "select b from t1 where id = 1"`

if [ "$cnt" != "110" ]; then
    failexit "b is $cnt instead of 110"
fi

echo "Testcase passed."
