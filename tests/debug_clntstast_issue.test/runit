#!/usr/bin/env bash
bash -n "$0" | exit 1

#set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

if [[ "x${DEBUGGER}" == "xvalgrind" ]] ; then
    CDB2SQL_EXE="$DEBUGGER $CDB2SQL_EXE" 
fi

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    failexit "need a DB name"
fi

# Number of insert_records function calls
nins=0


if [[ $DBNAME == *"snapshotgenerated"* ]] ; then
    lvl=$(cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select value from comdb2_tunables where name='sql_tranlevel_default'")
    if [ "$lvl" != "SNAPSHOT ISOLATION" ] ; then
       failexit "DB is not running in snapshot isolation mode"
    fi
    $CDB2SQL_EXE ${CDB2_OPTIONS} $DBNAME default "@send get_newsi_status" 
fi

assert_vers()
{
    local loc_tbl=$1
    local target=$2
    local newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$loc_tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

insert_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )"  &>> $insfl
        if [ $? -ne 0 ]; then 
            failexit "failure inserting record $j rc = $?"
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
    done
    echo "done inserting round $nout"
}

update_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    updfl=update${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $updfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set alltypes_short=alltypes_short+1, alltypes_int=alltypes_int+1,alltypes_u_int=alltypes_u_int+1,alltypes_longlong=alltypes_longlong+1,alltypes_float=alltypes_float=1,alltypes_double=alltypes_double+1,alltypes_decimal32=alltypes_decimal32+1,alltypes_decimal64=alltypes_decimal64+1,alltypes_decimal128=alltypes_decimal128+1 where alltypes_u_short=$j"  &>> $updfl
        if [ $? -ne 0 ]; then 
            failexit "failure updating record $j rc = $?"
        fi
        let j=j+1
    done
    echo "done updating round $nout"
}

delete_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    delfl=delete${nout}.out
    echo "Deleting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $delfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where alltypes_u_short=$j"  &>> $delfl
        if [ $? -ne 0 ]; then 
            failexit "failure deleting record $j rc = $?"
        fi
        let j=j+1
    done
    echo "done updating round $nout"
}



echo "Diff genseries with normal bulk insert"

test_serial() {
    for tbl in a b c d e f ; do 
        cdb2sql --setarvg0 ${tbl}_cdb2sql ${CDB2_OPTIONS} $dbnm default "create table mytable6_$tbl (i int unique, j int, k int)"
    done
    for i in `seq 1 $CNT` ; do 
        for tbl in a b c d e f ; do 
            cdb2sql --setarvg0 ${tbl}_cdb2sql -s ${CDB2_OPTIONS} $dbnm default "insert into mytable6_$tbl values($i,$i,$i+sleep(1.7))" &
        done
    done
    $CDB2SQL_EXE ${CDB2_OPTIONS} $DBNAME default "@send stat clnt" 
    wait
    $CDB2SQL_EXE ${CDB2_OPTIONS} $DBNAME default "@send stat clnt" 

    for tbl in a b c d e f ; do 
        assertcnt mytable6_$tbl $CNT
        cdb2sql --setarvg0 ${tbl}_cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table mytable6_$tbl"
    done
}

test_bulk() {
    for tbl in a b c d e f ; do 
        cdb2sql --setarvg0 cdb2sql_$tbl ${CDB2_OPTIONS} $dbnm default "create table mytable6_$tbl (i int unique, j int, k int)"
        echo -n "insert into mytable6_$tbl values(1,1,1)" > gg_$tbl.in
        for i in `seq 2 $CNT` ; do echo -n ",($i, $i, $i)" ; done >> gg_$tbl.in
    done
    for tbl in a b c d e f ; do 
        cdb2sql --setarvg0 cdb2sql_$tbl -s ${CDB2_OPTIONS} $dbnm default -f gg_$tbl.in &
    done
    $CDB2SQL_EXE ${CDB2_OPTIONS} $DBNAME default "@send stat clnt" 
    wait

    for tbl in a b c d e f ; do 
        assertcnt mytable6_$tbl $CNT
        cdb2sql --setarvg0 cdb2sql_$tbl ${CDB2_OPTIONS} $dbnm default "drop table mytable6_$tbl"
    done
}

test_bulk_tran() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default "create table mytable6 (i int unique, j int, k int)"
    echo "begin" > gg.in
    for i in `seq 1 $CNT` ; do 
        echo "insert into mytable6 values($i,$i,$i)" >> gg.in
    done
    echo "commit" >> gg.in

    cdb2sql -s ${CDB2_OPTIONS} $dbnm default -f gg.in
    assertcnt mytable6 $CNT
    cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table mytable6"
}

test_generate_series() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default "create table mytable6 (i int unique, j int, k int)"
    cdb2sql -s ${CDB2_OPTIONS} $dbnm default "insert into mytable6 select value, value, value from generate_series limit $CNT"
    assertcnt mytable6 $CNT
    cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table mytable6"
}


CNT=4000
#time test_bulk_tran
time test_serial
#time test_bulk
#time test_generate_series

echo "Success"

